TYPEDEF: SV := U => U;
TYPEDEF: Number := SV => U => U;
DEFINE: id    := lam x :: U -> x;
DEFINE: true  := lam x, y :: U -> x;
DEFINE: false := lam x, y :: U -> y;
DEFINE: ite   := lam b :: U => U => U -> lam x, y :: U -> b . x . y;
DEFINE: zero  := lam s :: SV -> lam z :: U -> z;
DEFINE: succ  := lam m :: Number -> lam s :: SV -> lam z :: U -> s . (m . s . z);
DEFINE: plus  := lam m, n :: Number -> lam s :: SV -> lam z :: U -> m . s . (n . s . z);
DEFINE: mul   := lam m, n :: Number -> lam s :: SV -> lam z :: U -> m . (n . s) . z;
DEFINE: one   := succ . zero;
DEFINE: two   := succ . one;
DEFINE: three := succ . two;
DEFINE: four  := succ . three;
DEFINE: five  := succ . four;
DEFINE: six   := succ . five;
DEFINE: program := mul . three . two;
EVAL: program;

