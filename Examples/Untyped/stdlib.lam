DEFINE id    := lam x -> x;

DEFINE fls   := lam x, y -> y;
DEFINE tru   := lam x, y -> x;
DEFINE and   := lam b1, b2 -> b1 . b2 . fls;
DEFINE or    := lam b1, b2 -> b1 . tru . b2;
DEFINE not   := lam b -> b . fls . tru;
DEFINE ite   := lam b, x, y -> b . x . y;

DEFINE pair  := lam x, y, b -> b . x . y;
DEFINE fst   := lam p -> p . tru;
DEFINE snd   := lam p -> p . fls;

DEFINE zero  := lam s, z -> z;
DEFINE succ  := lam n, s, z -> s . (n . s . z);
DEFINE one   := succ . zero;
DEFINE two   := succ . one;
DEFINE three := succ . two;
DEFINE four  := succ . three;
DEFINE five  := succ . four;
DEFINE add   := lam n, m, s, z -> m . s . (n . s . z);
DEFINE mul   := lam n, m, s, z -> m . (n . s) . z;
DEFINE mul_2 := lam n, m -> n . (add . m) . zero;
DEFINE pow   := lam n, m -> m . (mul . n) . one;

DEFINE prd_zz := pair . zero . zero;
DEFINE prd_ss := lam p -> pair . (snd . p) . (succ . (snd . p));
DEFINE prd := lam n -> fst . (n . prd_ss . prd_zz);
DEFINE sub := lam n, m -> m . prd . n;

DEFINE iszero := lam n -> n . (lam b -> fls) . tru;
DEFINE equals := lam n, m -> and . (iszero . (sub . n . m)) . (iszero . (sub . m . n));

DEFINE lt := lam n, m -> and . (iszero . (sub . n . m)) . (not . (iszero . (sub . m . n)));

DEFINE Y := lam f -> (lam x -> f . (lam y -> x . x . y)) . (lam x -> f . (lam y -> x . x . y));
