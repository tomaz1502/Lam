module Lam.View where

open import Data.Sum using (_⊎_; inj₁; inj₂)

open import Lam.Data
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_≡_; _≢_; refl)

open import Data.Empty using (⊥-elim)
open import Data.Product using (_×_; Σ; Σ-syntax; ∃; ∃-syntax) renaming (_,_ to ⟨_,_⟩)
open import Relation.Nullary using (¬_)

open import Lam.FormalizationTypeChecker

viewBool : ∀ (L : Expr) → ∃[ b ] (L ≡ Const (BoolC b)) ⊎ (¬ (∃[ b ] L ≡ Const (BoolC b)))
viewBool (Var x) = inj₂ λ ()
viewBool (Lam x x₁ L) = inj₂ λ ()
viewBool (App L L₁) = inj₂ λ ()
viewBool (Ite L L₁ L₂) = inj₂ λ ()
viewBool (Inl L x) = inj₂ λ ()
viewBool (Inr L x) = inj₂ λ ()
viewBool (Case L x L₁ x₁ L₂) = inj₂ λ ()
viewBool (Const (NumC x)) = inj₂ λ ()
viewBool (Const (BoolC x)) = inj₁ ⟨ x , refl ⟩
viewBool (BinOp x L L₁) = inj₂ λ ()
viewBool (UnaryOp x L) = inj₂ λ ()
viewBool (Fix _) = inj₂ λ ()

viewNum : ∀ (L : Expr) → ∃[ b ] (L ≡ Const (NumC b)) ⊎ (¬ (∃[ b ] L ≡ Const (NumC b)))
viewNum (Var x) = inj₂ λ ()
viewNum (Lam x x₁ L) = inj₂ λ ()
viewNum (App L L₁) = inj₂ λ ()
viewNum (Ite L L₁ L₂) = inj₂ λ ()
viewNum (Inl L x) = inj₂ λ ()
viewNum (Inr L x) = inj₂ λ ()
viewNum (Case L x L₁ x₁ L₂) = inj₂ λ ()
viewNum (Const (BoolC x)) = inj₂ λ ()
viewNum (Const (NumC x)) = inj₁ ⟨ x , refl ⟩
viewNum (BinOp x L L₁) = inj₂ λ ()
viewNum (UnaryOp x L) = inj₂ λ ()
viewNum (Fix _) = inj₂ λ ()

viewMkPair : ∀ (L : Expr) → ∃[ p1 ] ∃[ p2 ] (L ≡ (BinOp MkPair p1 p2)) ⊎ (¬ (∃[ p1 ] ∃[ p2 ] L ≡ (BinOp MkPair p1 p2)))
viewMkPair (Var x) = inj₂ λ ()
viewMkPair (Lam x x₁ L) = inj₂ λ ()
viewMkPair (App L L₁) = inj₂ λ ()
viewMkPair (Ite L L₁ L₂) = inj₂ λ ()
viewMkPair (Inl L x) = inj₂ λ ()
viewMkPair (Inr L x) = inj₂ λ ()
viewMkPair (Case L x L₁ x₁ L₂) = inj₂ λ ()
viewMkPair (Const (BoolC x)) = inj₂ λ ()
viewMkPair (Const (NumC x)) = inj₂ λ ()
viewMkPair (BinOp Add L L₁) = inj₂ λ ()
viewMkPair (BinOp Sub L L₁) = inj₂ λ ()
viewMkPair (BinOp Mul L L₁) = inj₂ λ ()
viewMkPair (BinOp And L L₁) = inj₂ λ ()
viewMkPair (BinOp Or L L₁) = inj₂ λ ()
viewMkPair (BinOp LtInt L L₁) = inj₂ λ ()
viewMkPair (BinOp MkPair p1 p2) = inj₁ ⟨ p1 , ⟨ p2 , refl ⟩ ⟩
viewMkPair (UnaryOp x L) = inj₂ λ ()
viewMkPair (Fix _) = inj₂ λ ()

viewInl : ∀ (L : Expr) → ∃[ p1 ] ∃[ p2 ] (L ≡ (Inl p1 p2)) ⊎ (¬ (∃[ p1 ] ∃[ p2 ] L ≡ (Inl p1 p2)))
viewInl (Var _) = inj₂ λ ()
viewInl (Lam _ _ _) = inj₂ λ ()
viewInl (App _ _) = inj₂ λ ()
viewInl (Ite _ _ _) = inj₂ λ ()
viewInl (Inl L M) = inj₁ ⟨ L , ⟨ M , refl ⟩ ⟩
viewInl (Inr _ _) = inj₂ λ ()
viewInl (Case _ _ _ _ _) = inj₂ λ ()
viewInl (Const (BoolC x)) = inj₂ λ ()
viewInl (Const (NumC x)) = inj₂ λ ()
viewInl (BinOp Add L L₁) = inj₂ λ ()
viewInl (BinOp Sub L L₁) = inj₂ λ ()
viewInl (BinOp Mul L L₁) = inj₂ λ ()
viewInl (BinOp And L L₁) = inj₂ λ ()
viewInl (BinOp Or L L₁) = inj₂ λ ()
viewInl (BinOp LtInt L L₁) = inj₂ λ ()
viewInl (BinOp MkPair p1 p2) = inj₂ λ ()
viewInl (UnaryOp x L) = inj₂ λ ()
viewInl (Fix _) = inj₂ λ ()

viewInr : ∀ (L : Expr) → ∃[ p1 ] ∃[ p2 ] (L ≡ (Inr p1 p2)) ⊎ (¬ (∃[ p1 ] ∃[ p2 ] L ≡ (Inr p1 p2)))
viewInr (Var x) = inj₂ λ ()
viewInr (Lam x x₁ L) = inj₂ λ ()
viewInr (App L L₁) = inj₂ λ ()
viewInr (Ite L L₁ L₂) = inj₂ λ ()
viewInr (Inl L M) = inj₂ λ ()
viewInr (Inr L M) = inj₁ ⟨ L , ⟨ M , refl ⟩ ⟩
viewInr (Case L x L₁ x₁ L₂) = inj₂ λ ()
viewInr (Const (BoolC x)) = inj₂ λ ()
viewInr (Const (NumC x)) = inj₂ λ ()
viewInr (BinOp Add L L₁) = inj₂ λ ()
viewInr (BinOp Sub L L₁) = inj₂ λ ()
viewInr (BinOp Mul L L₁) = inj₂ λ ()
viewInr (BinOp And L L₁) = inj₂ λ ()
viewInr (BinOp Or L L₁) = inj₂ λ ()
viewInr (BinOp LtInt L L₁) = inj₂ λ ()
viewInr (BinOp MkPair p1 p2) = inj₂ λ ()
viewInr (UnaryOp x L) = inj₂ λ ()
viewInr (Fix _) = inj₂ λ ()

viewLam : ∀ (L : Expr) → (∃[ n ] ∃[ ty ] ∃[ L' ] (L ≡ Lam n ty L')) ⊎ (¬ (∃[ n ] ∃[ ty ] ∃[ L' ] (L ≡ Lam n ty L')))
viewLam (Var x) = inj₂ (λ ())
viewLam (Lam n ty L') = inj₁ ⟨ n , ⟨ ty , ⟨ L' , refl ⟩ ⟩ ⟩
viewLam (App L L₁) = inj₂ (λ ())
viewLam (Fix L) = inj₂ (λ ())
viewLam (Ite L L₁ L₂) = inj₂ (λ ())
viewLam (Inl L x) = inj₂ (λ ())
viewLam (Inr L x) = inj₂ (λ ())
viewLam (Case L x L₁ x₁ L₂) = inj₂ (λ ())
viewLam (Const x) = inj₂ (λ ())
viewLam (BinOp x L L₁) = inj₂ (λ ())
viewLam (UnaryOp x L) = inj₂ (λ ())
